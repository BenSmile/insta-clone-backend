org: vodacom

custom:
  secrets: ${file(secrets.json)}
  tableName: "test-users-table"
  postTableName: "posts-table"
  notificationsTableName: "notifications-table"
  optsTableName: "otps-table"
  dynamodb:
    stages:
      - dev
    start:
      port: 8080
      migrate: true
  serverless-offline:
    resourcesRoutes: true

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

service: serverless-jwt-authorizer
provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    AWS_ID: ${self:custom.secrets.AWS_ID}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"
functions:
  findUsers:
    handler: functions/findUsers.handler
    events:
      - http:
          path: users
          method: get
          cors: true

  findNotifications:
    handler: functions/allNotifications.handler
    events:
      - http:
          path: notifications
          method: get
          cors: true

  findOtps:
    handler: functions/findUsers.getOtps
    events:
      - http:
          path: otps
          method: get
          cors: true

  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true

  verify-token:
    handler: functions/authorize.handler

  me:
    handler: functions/me.handler
    events:
      - http:
          path: me
          method: get
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
  login:
    handler: functions/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true

  register:
    handler: functions/register.handler
    events:
      - http:
          path: register
          method: post
          cors: true

  completeRegistration:
    handler: functions/completeRegistration.handler
    events:
      - http:
          path: completeRegistration
          method: put
          cors: true

  verifyOtp:
    handler: functions/verifyOtp.handler
    events:
      - http:
          path: verifyOtp
          method: post
          cors: true

# POSTS endpoints
  createPost:
    handler: functions/posts.create
    events:
      - http:
          path: posts
          method: post
          cors: true

  allPosts:
    handler: functions/posts.allPosts
    events:
      - http:
          path: posts
          method: get
          cors: true

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    postsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    otpsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.optsTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    notificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.notificationsTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1